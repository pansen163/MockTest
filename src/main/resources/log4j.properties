### set log levels ###
log4j.rootLogger = debug,stdout,D,E
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n

###properties文件的#注释只能出现在行首
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#log4j.appender.R.MaxFileSize=100KB
# %m  输出代码中指定的消息
# %p  输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %r  输出自应用启动到输出该log信息耗费的毫秒数
# %c  输出所属的类目，通常就是所在类的全名
# %t  输出产生该日志事件的线程名
# %n  输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”
# %d  输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921
# %l  输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )

### 输出到日志文件 ### 输出DEBUG级别以上的日志
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = ./logs/log.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH\:mm\:ss,SSS} [%c]-[%p] %m%n

### 保存异常信息到单独文件 只输出ERROR级别以上的日志!!!
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File = ./logs/error.log
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern =%-d{yyyy-MM-dd HH\:mm\:ss,SSS} [%c]-[%p] %m%n


